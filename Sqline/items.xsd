<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="items" targetNamespace="http://sqline.net/schemas/items.xsd" elementFormDefault="qualified" xmlns:sqt="http://sqline.net/schemas/items.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:element name="items">
		<xs:complexType>
			<xs:sequence>
				<xs:choice minOccurs="0" maxOccurs="unbounded">

					<!-- Configuration -->
					<xs:element name="configuration" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>
								Configure how sqline generates its classes (namespacing and usings)
							</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:choice minOccurs="0" maxOccurs="unbounded">
								  <xs:element name="connectionstring" minOccurs="0" maxOccurs="1">
                    <xs:complexType>
                      <xs:attribute name="value" type="xs:string" use="required">
												<xs:annotation>
													<xs:documentation>connectionstring for your database</xs:documentation>
												</xs:annotation>
											</xs:attribute>
										</xs:complexType>
									</xs:element>
									<xs:element name="viewitems" minOccurs="0" maxOccurs="unbounded">
										<xs:complexType>
											<xs:sequence>
												<xs:choice minOccurs="0" maxOccurs="unbounded">
													<xs:element name="base" minOccurs="0" maxOccurs="unbounded">
														<xs:complexType>
															<xs:attribute name="name" type="xs:string" use="optional">
																<xs:annotation>
																	<xs:documentation>The name of the class or interface to extend or implement</xs:documentation>
																</xs:annotation>
															</xs:attribute>
															<xs:attribute name="type" type="sqt:BaseType" use="optional">
																<xs:annotation>
																	<xs:documentation>Declares whether to extend a super class or implement an interface (public, protected, private inheritance is specific to languages that support this eg. C++)</xs:documentation>
																</xs:annotation>
															</xs:attribute>
															<xs:attribute name="remove" type="sqt:RemovalOptions" use="optional">
																<xs:annotation>
																	<xs:documentation>Removes a Base defined in a previous config file - use "all" to remove all previously defined Base references or the name of the previously defined Base class to remove only this particular reference</xs:documentation>
																</xs:annotation>
															</xs:attribute>
														</xs:complexType>
													</xs:element>
													<xs:element name="using" minOccurs="0" maxOccurs="unbounded">
														<xs:complexType>
															<xs:attribute name="namespace" type="xs:string" use="optional">
																<xs:annotation>
																	<xs:documentation>Adds a Using Namespace or Type</xs:documentation>
																</xs:annotation>
															</xs:attribute>
															<xs:attribute name="remove" type="sqt:RemovalOptions" use="optional">
																<xs:annotation>
																	<xs:documentation>Removes a Using defined in a previous config file - use "all" to remove all previously defined Usings or the name of the previous Namespace/Type to remove only this particular reference</xs:documentation>
																</xs:annotation>
															</xs:attribute>
														</xs:complexType>
													</xs:element>
													<xs:element name="include" minOccurs="0" maxOccurs="unbounded">
														<xs:complexType>
															<xs:attribute name="file" type="xs:string" use="optional">
																<xs:annotation>
																	<xs:documentation>Adds a file include for languages that support this feature</xs:documentation>
																</xs:annotation>
															</xs:attribute>
															<xs:attribute name="remove" type="sqt:RemovalOptions" use="optional">
																<xs:annotation>
																	<xs:documentation>Removes an Include defined in a previous config file - use "all" to remove all previously defined Includes or the name of the previous include file to remove only this particular reference</xs:documentation>
																</xs:annotation>
															</xs:attribute>
														</xs:complexType>
													</xs:element>
												</xs:choice>
											</xs:sequence>
											<xs:attribute name="namespace" type="xs:string" use="optional">
												<xs:annotation>
													<xs:documentation>Adds a Using Namespace to the resulting ViewItems and Method class</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attribute name="prefix" type="xs:string" use="optional">
												<xs:annotation>
													<xs:documentation>Adds a prefix to the ViewItem class and filenames eg. prefix="V" would result in ViewItems generated as VUser, VNews etc. this feature can be used to prevent namespace conflicts and make ViewItems easily identifiable</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attribute name="postfix" type="xs:string" use="optional">
												<xs:annotation>
													<xs:documentation>Adds a postfix to the ViewItem class and filenames eg. postfix="Item" would result in ViewItems generated as UserItem, NewsItem etc. this feature can be used to prevent namespace conflicts and make ViewItems easily identifiable</xs:documentation>
												</xs:annotation>
											</xs:attribute>
										</xs:complexType>
									</xs:element>
									<xs:element name="methods" minOccurs="0" maxOccurs="unbounded">
										<xs:complexType>
											<xs:sequence>
												<xs:choice minOccurs="0" maxOccurs="unbounded">
													<xs:element name="using" minOccurs="0" maxOccurs="unbounded">
														<xs:complexType>
															<xs:attribute name="namespace" type="xs:string" use="optional">
																<xs:annotation>
																	<xs:documentation>Adds a Using Namespace or Type</xs:documentation>
																</xs:annotation>
															</xs:attribute>
															<xs:attribute name="remove" type="sqt:RemovalOptions" use="optional">
																<xs:annotation>
																	<xs:documentation>Removes a Using defined in a previous config file - use "all" to remove all previously defined Usings or the name of the previous Namespace/Type to remove only this particular reference</xs:documentation>
																</xs:annotation>
															</xs:attribute>
														</xs:complexType>
													</xs:element>
													<xs:element name="include" minOccurs="0" maxOccurs="unbounded">
														<xs:complexType>
															<xs:attribute name="file" type="xs:string" use="optional">
																<xs:annotation>
																	<xs:documentation>Adds a file include for languages that support this feature</xs:documentation>
																</xs:annotation>
															</xs:attribute>
															<xs:attribute name="remove" type="sqt:RemovalOptions" use="optional">
																<xs:annotation>
																	<xs:documentation>Removes an Include defined in a previous config file - use "all" to remove all previously defined Includes or the name of the previous include file to remove only this particular reference</xs:documentation>
																</xs:annotation>
															</xs:attribute>
														</xs:complexType>
													</xs:element>
												</xs:choice>
											</xs:sequence>
											<xs:attribute name="namespace" type="xs:string" use="optional">
												<xs:annotation>
													<xs:documentation>Adds a Using Namespace to the resulting ViewItems and Method class</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attribute name="timeout" type="xs:integer" use="optional">
												<xs:annotation>
													<xs:documentation>Sets the default command timeout for a SQL statement execution in seconds</xs:documentation>
												</xs:annotation>
											</xs:attribute>
										</xs:complexType>
									</xs:element>
								</xs:choice>
							</xs:sequence>
						</xs:complexType>
					</xs:element>

					<!-- ViewItem -->

					<xs:element name="viewitem" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>
								Defines a ViewItem which is basicly a data-holding entity class, but where most ORMs use an entity class to describe a Table structure, a ViewItem in Sqline describes the output of a SQL query (considered a "View", not to be confused with an actual Database View).
								A ViewItem can serve as the data-entity result for more than 1 method (or SQL query)
							</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>

								<!-- Base -->
								<xs:element name="base" minOccurs="0" maxOccurs="unbounded">
									<xs:complexType>
										<xs:attribute name="name" type="xs:string" use="optional">
											<xs:annotation>
												<xs:documentation>The name of the class or interface to extend or implement</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="type" type="sqt:BaseType" use="optional">
											<xs:annotation>
												<xs:documentation>Declares whether to extend a super class or implement an interface (public, protected, private inheritance is specific to languages that support this eg. C++)</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="remove" type="sqt:RemovalOptions" use="optional">
											<xs:annotation>
												<xs:documentation>Removes a Base defined in a previous config file - use "all" to remove all previously defined Base references or the name of the previously defined Base class to remove only this particular reference</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:complexType>
								</xs:element>
								
								<!-- Field -->
								<xs:element name="field" minOccurs="0" maxOccurs="unbounded">
									<xs:complexType>
										<xs:sequence>
											<xs:choice minOccurs="0" maxOccurs="unbounded">
												<!-- <default> -->
												<xs:element name="default" minOccurs="0" maxOccurs="1">
													<xs:annotation>
														<xs:documentation>
															The default value in case of a NULL result from the database.
															Example: default="100".
															This field uses a lambda expression and thus more advanced expressions are possible.
															The lambda is initiated with an "item" argument that refers to the current ViewItem.
															Use brackets &lt;default&gt;{ return "Hello World"; }&lt;/default&gt; to create a multi-line C# statement
														</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:simpleContent>
															<xs:extension base="xs:string"></xs:extension>
														</xs:simpleContent>
													</xs:complexType>
												</xs:element>
												<!-- <transform> -->
												<xs:element name="transform" minOccurs="0" maxOccurs="1">
													<xs:annotation>
														<xs:documentation>
															Transforms the field value - this field uses a lambda expression.
															The lambda is initiated with an "item" argument that refers to the current ViewItem.
															Use brackets &lt;transform&gt;{ return item.Name.ToLowerCase(); }&lt;/transform&gt; to create a multi-line C# statement
														</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:simpleContent>
															<xs:extension base="xs:string"></xs:extension>
														</xs:simpleContent>
													</xs:complexType>
												</xs:element>
											</xs:choice>
										</xs:sequence>
										<xs:attribute name="name" type="xs:string">
											<xs:annotation>
												<xs:documentation>Field database name - make sure your SQL query maps to this name using an AS alias if necessary, also names the resulting C# property</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="type" type="sqt:ValueType">
											<xs:annotation>
												<xs:documentation>The type of the field value using common sql types (varchar, nvarchar, int, ...)</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="nullable" type="sqt:Boolean">
											<xs:annotation>
												<xs:documentation>Specifies if the data from the database can be NULL and changes the C# type to a Nullable data type (default: false)</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="visibility" type="sqt:Visibility">
											<xs:annotation>
												<xs:documentation>Specifies the visibility of the field (default: public)</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="source" type="sqt:SourceType">
											<xs:annotation>
												<xs:documentation>Defines the source of the field - queryfield means it is bound to the SQL query - none means it is unbound (can be used as a calculated field using transform) (default: queryfield)</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="default" type="xs:string">
											<xs:annotation>
												<xs:documentation>
													The default value in case of a NULL result from the database.
													Example: default="100".
													This field uses a lambda expression and thus more advanced expressions are possible.
													The lambda is initiated with an "item" argument that refers to the current ViewItem.
													Use brackets default='{ return "Hello World"; }' to create a multi-line C# statement
												</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="transform" type="xs:string">
											<xs:annotation>
												<xs:documentation>
													Transforms the field value - this field uses a lambda expression.
													The lambda is initiated with an "item" argument that refers to the current ViewItem.
													Use brackets transform='{ return item.Name.ToLowerCase(); }' to create a multi-line C# statement
												</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:complexType>
								</xs:element>

								<!-- Method -->
								<xs:element name="method" minOccurs="0" maxOccurs="unbounded">
									<xs:complexType>
										<xs:sequence>
											<xs:choice minOccurs="0" maxOccurs="unbounded">
												<!-- <sort> -->
												<xs:element name="sort" minOccurs="0" maxOccurs="1">
													<xs:annotation>
														<xs:documentation>
															Sorts the resulting list - this field uses a lambda expression.
															The lambda is initiated with two arguments "item1, item2" of the current ViewItem.
															Use brackets &lt;sort&gt;{ return item1.Name.CompareTo(item2.Name); }&lt;/sort&gt; to create a multi-line C# statement
														</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:simpleContent>
															<xs:extension base="xs:string"></xs:extension>
														</xs:simpleContent>
													</xs:complexType>
												</xs:element>
												<!-- <sort> -->
												<xs:element name="filter" minOccurs="0" maxOccurs="1">
													<xs:annotation>
														<xs:documentation>
															Filters the resulting list, only keeping records that matches the filter - this field uses a lambda expression.
															The lambda is initiated with an "item" argument that refers to the current ViewItem.
															Use brackets &lt;filter&gt;{ return item.Name != "Test_Account"; }&lt;/filter&gt; to create a multi-line C# statement
														</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:simpleContent>
															<xs:extension base="xs:string"></xs:extension>
														</xs:simpleContent>
													</xs:complexType>
												</xs:element>
												<!-- <sql> -->
												<xs:element name="sql" minOccurs="1" maxOccurs="1">
													<xs:complexType>
														<xs:simpleContent>
															<xs:extension base="xs:string"></xs:extension>
														</xs:simpleContent>
													</xs:complexType>
												</xs:element>
												<!-- parameter -->
												<xs:element name="parameter" minOccurs="0" maxOccurs="unbounded">
													<xs:complexType>
														<xs:attribute name="name" type="xs:string" use="required">
															<xs:annotation>
																<xs:documentation>Name of the parameter (must match the name used in the Sql expression)</xs:documentation>
															</xs:annotation>
														</xs:attribute>
														<xs:attribute name="type" type="sqt:ValueType" use="required">
															<xs:annotation>
																<xs:documentation>Parameter Data Type</xs:documentation>
															</xs:annotation>
														</xs:attribute>
														<xs:attribute name="nullable" type="sqt:Boolean">
															<xs:annotation>
																<xs:documentation>Specify if the parameter should allow NULL values (default: false)</xs:documentation>
															</xs:annotation>
														</xs:attribute>
													</xs:complexType>
												</xs:element>
												<!-- option -->
												<xs:element name="option" minOccurs="0" maxOccurs="unbounded">
													<xs:complexType>
														<xs:sequence>
															<xs:choice minOccurs="0" maxOccurs="unbounded">
																<!-- <default> -->
																<xs:element name="default" minOccurs="0" maxOccurs="1">
																	<xs:annotation>
																		<xs:documentation>
																			The default value in case of a NULL result from the database.
																			Example: default="100".
																			This field uses a lambda expression and thus more advanced expressions are possible.
																			The lambda is initiated with an "item" argument that refers to the current ViewItem.
																			Use brackets &lt;default&gt;{ return "Hello World"; }&lt;/default&gt; to create a multi-line C# statement
																		</xs:documentation>
																	</xs:annotation>
																	<xs:complexType>
																		<xs:simpleContent>
																			<xs:extension base="xs:string"></xs:extension>
																		</xs:simpleContent>
																	</xs:complexType>
																</xs:element>
																<!-- <transform> -->
																<xs:element name="transform" minOccurs="0" maxOccurs="1">
																	<xs:annotation>
																		<xs:documentation>
																			Transforms the field value - this field uses a lambda expression.
																			The lambda is initiated with an "item" argument that refers to the current ViewItem.
																			Use brackets &lt;transform&gt;{ return item.Name.ToLowerCase(); }&lt;/transform&gt; to create a multi-line C# statement
																		</xs:documentation>
																	</xs:annotation>
																	<xs:complexType>
																		<xs:simpleContent>
																			<xs:extension base="xs:string"></xs:extension>
																		</xs:simpleContent>
																	</xs:complexType>
																</xs:element>
															</xs:choice>
														</xs:sequence>
														<xs:attribute name="field" type="xs:string" use="required">
															<xs:annotation>
																<xs:documentation>A reference to the field to add additional processing options for - Example: field="Name"</xs:documentation>
															</xs:annotation>
														</xs:attribute>
														<xs:attribute name="default" type="xs:string">
															<xs:annotation>
																<xs:documentation>
																	The default value in case of a NULL result from the database.
																	Example: default="100".
																	This field uses a lambda expression and thus more advanced expressions are possible.
																	The lambda is initiated with an "item" argument that refers to the current ViewItem.
																	Use brackets default='{ return "Hello World"; }' to create a multi-line C# statement
																</xs:documentation>
															</xs:annotation>
														</xs:attribute>
														<xs:attribute name="transform" type="xs:string">
															<xs:annotation>
																<xs:documentation>
																	Transforms the field value - this field uses a lambda expression.
																	The lambda is initiated with an "item" argument that refers to the current ViewItem.
																	Use brackets transform='{ return item.Name.ToLowerCase(); }' to create a multi-line C# statement
																</xs:documentation>
															</xs:annotation>
														</xs:attribute>
													</xs:complexType>
												</xs:element>
											</xs:choice>
										</xs:sequence>
										<xs:attribute name="name" type="xs:string" use="required">
											<xs:annotation>
												<xs:documentation>Name of the resulting C# method</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="result" type="sqt:MethodResult">
											<xs:annotation>
												<xs:documentation>Defines whether the method returns a List or a single ViewItem (default: list)</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="visibility" type="sqt:Visibility">
											<xs:annotation>
												<xs:documentation>Set the visibility of the method (default: 'public')</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="timeout" type="xs:integer">
											<xs:annotation>
												<xs:documentation>Defines the query timeout (default value can be set in Sqline.config)</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="sort" type="xs:string">
											<xs:annotation>
												<xs:documentation>
													Sorts the resulting list - this field uses a lambda expression.
													The lambda is initiated with two arguments "item1, item2" of the current ViewItem.
													Use brackets sort="{ return item1.Name.CompareTo(item2.Name); }" to create a multi-line C# statement
												</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="filter" type="xs:string">
											<xs:annotation>
												<xs:documentation>
													Filters the resulting list, only keeping records that matches the filter - this field uses a lambda expression.
													The lambda is initiated with an "item" argument that refers to the current ViewItem.
													Use brackets filter="{ return item.Name != "Test_Account"; }" to create a multi-line C# statement
												</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="name" type="xs:string" use="required">
								<xs:annotation>
									<xs:documentation>The Name of the resulting C# ViewItem. (prefix and suffix can be defined in Sqline.config)</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:complexType>
					</xs:element>

				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>

	<!-- Classes -->

	<xs:simpleType name="Boolean">
		<xs:restriction base="xs:string">
			<xs:enumeration value="true"/>
			<xs:enumeration value="false"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="MethodResult">
		<xs:restriction base="xs:string">
			<xs:enumeration value="list">
				<xs:annotation>
					<xs:documentation>Reads all records and returns the result as a List (default).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="singleitem">
				<xs:annotation>
					<xs:documentation>Reads only the first record of the resultset and returns it as a single ViewItem</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="ValueType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="bigint" />
			<xs:enumeration value="binary" />
			<xs:enumeration value="bit" />
			<xs:enumeration value="char" />
			<xs:enumeration value="datetime" />
			<xs:enumeration value="decimal" />
			<xs:enumeration value="float" />
			<xs:enumeration value="image" />
			<xs:enumeration value="int" />
			<xs:enumeration value="money" />
			<xs:enumeration value="nchar" />
			<xs:enumeration value="ntext" />
			<xs:enumeration value="numeric" />
			<xs:enumeration value="nvarchar" />
			<xs:enumeration value="real" />
			<xs:enumeration value="smalldatetime" />
			<xs:enumeration value="smallint" />
			<xs:enumeration value="smallmoney" />
			<xs:enumeration value="sql_variant" />
			<xs:enumeration value="text" />
			<xs:enumeration value="timestamp" />
			<xs:enumeration value="tinyint" />
			<xs:enumeration value="uniqueidentifier" />
			<xs:enumeration value="varbinary" />
			<xs:enumeration value="varchar" />
			<xs:enumeration value="xml" />
			<xs:enumeration value="IDString" />
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="EnumType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="byte" />
			<xs:enumeration value="short" />
			<xs:enumeration value="int" />
			<xs:enumeration value="long" />
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="Visibility">
		<xs:restriction base="xs:string">
			<xs:enumeration value="public" />
			<xs:enumeration value="private" />
			<xs:enumeration value="protected" />
			<xs:enumeration value="internal" />
			<xs:enumeration value="internal protected" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="SourceType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none" />
			<xs:enumeration value="queryfield" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="RemovalOptions">
		<xs:union memberTypes="sqt:RemovalOptionsList xs:string"/>
	</xs:simpleType>
	
	<xs:simpleType name="RemovalOptionsList">
		<xs:restriction base="xs:string">
			<xs:enumeration value="all" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="BaseType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="implement" />
			<xs:enumeration value="extend" />
			<xs:enumeration value="public" />
			<xs:enumeration value="private" />
			<xs:enumeration value="protected" />
		</xs:restriction>
	</xs:simpleType>
</xs:schema>